{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8+aOcq8+RchFIDknSa3Pl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PabloOsorio/Analisis_Dise-o_Algoritomos/blob/main/lista_ligada\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ewXtZ8sBDc0l",
        "outputId": "7f3f84a8-0f06-4ffe-c19a-5879474ef554"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5, 7, \n",
            "5, 7, 312, \n",
            "5, 7, 312, 345, \n"
          ]
        }
      ],
      "source": [
        "class Node:\n",
        "    def __init__(self, data: int) -> None:\n",
        "        self.next = None\n",
        "        self.data = data\n",
        "\n",
        "class LinkedList:\n",
        "    def __init__(self) -> None:\n",
        "        self.head = None\n",
        "        self.tail = None\n",
        "\n",
        "    def print(self) -> str:\n",
        "        if self.head == None:\n",
        "            print('')\n",
        "            pass\n",
        "        n = self.head\n",
        "        value = ''\n",
        "        while n != None:\n",
        "            value += str(n.data) + ', '\n",
        "            n = n.next\n",
        "        print(value)\n",
        "\n",
        "    def insert_at_start(self, data):\n",
        "        node = Node(data)\n",
        "        if self.head == None:\n",
        "            self.head = node\n",
        "            pass\n",
        "        node.next = self.head\n",
        "        self.head = node\n",
        "\n",
        "    def insert_at_end(self, data):\n",
        "        node = Node(data)\n",
        "        if self.head == None:\n",
        "            self.head = node\n",
        "            pass\n",
        "        aux = self.head\n",
        "        while aux.next: #Mientras sea true\n",
        "                aux = aux.next\n",
        "        aux.next = node\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    node_one = Node(7)\n",
        "    list = LinkedList()\n",
        "\n",
        "    list.head = node_one\n",
        "    list.insert_at_start(5)\n",
        "    list.print()\n",
        "    list.insert_at_end(312)\n",
        "    list.print()\n",
        "    list.insert_at_end(345)\n",
        "    list.print()"
      ]
    }
  ]
}